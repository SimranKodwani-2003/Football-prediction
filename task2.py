# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19HYxBjRAnG3IuqrEix9iT_JpRgIoXP1g

2. Build models using all the algorithms above to predict market_value
"""

from sklearn import preprocessing
label_encoder=preprocessing.LabelEncoder()
encoded_data['club']=label_encoder.fit_transform(encoded_data['club'])
encoded_data['position']=label_encoder.fit_transform(encoded_data['position'])
encoded_data['nationality']=label_encoder.fit_transform(encoded_data['nationality'])

encoded_data=encoded_data.drop(columns=['name'])

encoded_data.head()

import numpy as np
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X = scaler.fit_transform(encoded_data[encoded_data.columns[~encoded_data.columns.isin([output_var])]])
Y = encoded_data[[output_var]]

encoded_data.corr()

x_test['club']=label_encoder.fit_transform(x_test['club'])
x_test['position']=label_encoder.fit_transform(x_test['position'])
x_test['nationality']=label_encoder.fit_transform(x_test['nationality'])
x_test=x_test.drop(columns=['name'])
x_train=encoded_data.drop(columns=['market_value'])

"""Linear Regression"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
Regression_Linear = LinearRegression(normalize=True)
print(Regression_Linear.get_params())
print(Regression_Linear.fit(x_train,y_train))
pred_linear = Regression_Linear.predict(x_test)
print("MSE score:",mean_squared_error(y_test,pred_linear))
print("R2 score:",r2_score(y_test,pred_linear))

pred_linear

"""Lasso Regression"""

from sklearn.linear_model import Lasso
model_lasso = Lasso(alpha=0.01)
model_lasso.fit(x_train, y_train)
pred_lasso= model_lasso.predict(x_test)
print("MSE score:",np.sqrt(mean_squared_error(y_test,pred_lasso)))
print("R2 score:",r2_score(y_test, pred_lasso))

pred_lasso

"""Ridge Regression"""

from sklearn.linear_model import Ridge
Rigression_Ridge = Ridge(alpha=0.01)
Rigression_Ridge.fit(x_train, y_train)
pred_Ridge= Rigression_Ridge.predict(x_test)
print("MSE score:",np.sqrt(mean_squared_error(y_test,pred_Ridge)))
print("R2 score:",r2_score(y_test, pred_Ridge))

pred_Ridge

"""Nearest Neighbour Regression"""

from sklearn import neighbors
from math import sqrt
rmse_val = []
for k in range(20):
    k = k+1
    model = neighbors.KNeighborsRegressor(n_neighbors = k)
    model.fit(x_train, y_train)
    pred_neighbor=model.predict(x_test)
    error = sqrt(mean_squared_error(y_test,pred_neighbor))
    rmse_val.append(error)
    print('RMSE value for k= ' , k , 'is:', error)

pred_neighbor

"""Support Vector Regression"""

from sklearn.svm import SVR
SupportVectorReg=SVR()
SupportVectorReg.fit(x_train,y_train)
pred_SVR=SupportVectorReg.predict(x_test)
print("MSE score:",np.sqrt(mean_squared_error(y_test,pred_SVR)))
print("R2 score:",r2_score(y_test, pred_SVR))

pred_SVR

"""Tree Regression"""

from sklearn.tree import DecisionTreeRegressor
DecisionTreeReg=DecisionTreeRegressor()
DecisionTreeReg.fit(x_train,y_train)
pred_tree=DecisionTreeReg.predict(x_test)
print("MSE score:",np.sqrt(mean_squared_error(y_test,pred_tree)))
print("R2 score:",r2_score(y_test, pred_tree))

pred_tree

"""Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor
RandomForestReg=RandomForestRegressor()
RandomForestReg.fit(x_train,y_train)
pred_forest=RandomForestReg.predict(x_test)
print("MSE score:",np.sqrt(mean_squared_error(y_test,pred_forest)))
print("R2 score:",r2_score(y_test, pred_forest))

pred_forest

"""Gradient Boosted Regression"""

from sklearn.ensemble import GradientBoostingRegressor
regressor = GradientBoostingRegressor(
    n_estimators= 500,
    max_depth= 4,
    min_samples_split= 5,
    learning_rate= 0.01,
)
regressor.fit(x_train,y_train)
pred_gradient = regressor.predict(x_test)
print("MSE score:",np.sqrt(mean_squared_error(y_test,pred_gradient)))
print("R2 score:",r2_score(y_test,pred_gradient))

pred_gradient